
### GENERAL SETTINGSSS
#

# Default directory to save the downloaded torrents.
directory = <%= "/home/#{@node[:rtorrent][:user]}" %>/downloads

# Default session directory.
# Make sure you don't run multiple instance of rtorrent using the same session directory.
session = <%= "/home/#{@node[:rtorrent][:user]}" %>/.session

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
encryption = <%= @node[:rtorrent][:encryption] %>

# Stop torrents when
# reaching upload ratio in percent,
# or reaching total upload in Mbytes,
# or reaching final upload ratio in percent.
<% if @node[:rtorrent][:ratio] %>
ratio.enable =
ratio.min.set = <%= @node[:rtorrent][:ratio_min] %>
ratio.max.set = <%= @node[:rtorrent][:ratio_max] %>
ratio.upload.set = <%= @node[:rtorrent][:ratio_upload] %>
<% end %>

### THROTTLE SETTINGS

# Global upload and download rate. "0" for unlimited.
upload_rate = <%= @node[:rtorrent][:upload_rate] %>
download_rate = <%= @node[:rtorrent][:download_rate] %>

# Maximum and minimum number of peers to connect to per torrent.
min_peers = <%= @node[:rtorrent][:min_peers] %>
max_peers = <%= @node[:rtorrent][:max_peers] %>

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = <%= @node[:rtorrent][:min_peers_seed] %>
max_peers_seed = <%= @node[:rtorrent][:max_peers_seed] %>

# Maximum number of simultaneous uploads per torrent.
max_uploads = <%= @node[:rtorrent][:max_uploads] %>

### TRACKER RELATED SETTINGS

# The ip address reported to the tracker.
ip = <%= @node[:rtorrent][:ipaddress] %>

# The socket to communicate over XMLRPC-C
scgi_local = <%= "/home/#{node[:rtorrent][:user]}" %>/.session/rtorrent.socket
schedule = chmod,0,0,"execute=chmod,777,<%= "/home/#{node[:rtorrent][:user]}" %>/.session/rtorrent.socket"

# Port range to use for listening.
port_range = 62<%= @node[:rtorrent][:index] %>-62<%= @node[:rtorrent][:index] %>

# Start opening ports at a random position within the port range.
port_random = <%= node[:rtorrent][:port_random] %>

peer_exchange = <%= node[:rtorrent][:peer_exchange] %>

# Set whetever the client should try to connect to UDP trackers.
use_udp_trackers = <%= node[:rtorrent][:use_udp_trackers] %>

dht = <%= node[:rtorrent][:dht] %>

tracker_numwant = <%= node[:rtorrent][:tracker_numwant] %>

### SCHEDULING
#

# Watch a directory for new torrents, and stop those that have been deleted.
schedule = watch_directory,5,5,load_start=<%= "/home/#{@node[:rtorrent][:user]}" %>/watch/*.torrent
schedule = untied_directory,5,5,stop_untied=<%= "/home/#{@node[:rtorrent][:user]}" %>/watch/*.torrent

<% if @node[:rtorrent][:btsync] and @node[:rtorrent][:btsync_dir] %>
schedule = watch_directory_bt,5,5,"load_start=<%= "/home/#{@node[:rtorrent][:user]}" %>/<%= @node[:rtorrent][:btsync_dir] %>/*.torrent,d.set_directory=<%= "/home/#{@node[:rtorrent][:user]}" %>/downloads/Sync"
<% end %>

# Close torrents when diskspace is low.
schedule = low_diskspace,5,60,close_low_diskspace=1000M
